name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        
    - name: Cache dependencies
      id: cache
      uses: actions/cache@v3
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        npm ci
          
    - name: Create .env.production for CD Deploy
      run: |
        echo "${{ secrets.CD_DEPLOY_CONFIG }}" > .env.production

    - name: Build
      run: |
        npm run build
        ls
        
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-frontend ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          
      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            pwd
            ls -al
            cd automation_front
            pwd
            
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            docker pull ghcr.io/silenc3502/frontend-server:latest

            docker image prune -f
            docker logout
            
            docker-compose up -d

        
